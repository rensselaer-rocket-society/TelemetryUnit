
atmega1281/optiboot_flash_atmega1281_UART0_115200_10000000L.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  0001fe94  00000328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000294  0001fc00  0001fc00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  0001fffe  0001fffe  00000328  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000011  00000000  00000000  0000032a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000033b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e8  00000000  00000000  0000036b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000270  00000000  00000000  00000a53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fe  00000000  00000000  00000cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  000010c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000241  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004c1  00000000  00000000  000013b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001872  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001fc00 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table,
  //   so entry to this function will always be here, indepedent of compilation,
  //   features etc
  asm volatile (
   1fc00:	01 c0       	rjmp	.+2      	; 0x1fc04 <main>
   1fc02:	f4 c0       	rjmp	.+488    	; 0x1fdec <do_spm>

0001fc04 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
   1fc04:	11 24       	eor	r1, r1
// Fix missing definitions in avr-libc   
#if defined(__AVR_ATmega8515__) || defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__) \
|| defined(__AVR_ATmega162__) || defined (__AVR_ATmega128__)
  ch = MCUCSR;
#else
  ch = MCUSR;
   1fc06:	84 b7       	in	r24, 0x34	; 52
#endif
  // Skip all logic and run bootloader if MCUSR is cleared (application request)
  if (ch != 0) {
   1fc08:	88 23       	and	r24, r24
   1fc0a:	49 f0       	breq	.+18     	; 0x1fc1e <main+0x1a>
     *  2. we clear WDRF if it's set with EXTRF to avoid loops
     * One problematic scenario: broken application code sets watchdog timer 
     * without clearing MCUSR before and triggers it quickly. But it's
     * recoverable by power-on with pushed reset button.
     */
    if ((ch & (_BV(WDRF) | _BV(EXTRF))) != _BV(EXTRF)) { 
   1fc0c:	98 2f       	mov	r25, r24
   1fc0e:	9a 70       	andi	r25, 0x0A	; 10
   1fc10:	92 30       	cpi	r25, 0x02	; 2
   1fc12:	29 f0       	breq	.+10     	; 0x1fc1e <main+0x1a>
      if (ch & _BV(EXTRF)) {
   1fc14:	81 ff       	sbrs	r24, 1
   1fc16:	02 c0       	rjmp	.+4      	; 0x1fc1c <main+0x18>
// Fix missing definitions in avr-libc         
#if defined(__AVR_ATmega8515__) || defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__) \
|| defined(__AVR_ATmega162__) || defined(__AVR_ATmega128__)
        MCUCSR = ~(_BV(WDRF));  
#else
        MCUSR = ~(_BV(WDRF));  
   1fc18:	97 ef       	ldi	r25, 0xF7	; 247
   1fc1a:	94 bf       	out	0x34, r25	; 52
#endif
      }
      appStart(ch);
   1fc1c:	1f d1       	rcall	.+574    	; 0x1fe5c <appStart>
    }
  }
  
#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
   1fc1e:	85 e0       	ldi	r24, 0x05	; 5
   1fc20:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UART_SRA = _BV(U2X0); //Double speed mode USART0
   1fc24:	82 e0       	ldi	r24, 0x02	; 2
   1fc26:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
   1fc2a:	88 e1       	ldi	r24, 0x18	; 24
   1fc2c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
   1fc30:	86 e0       	ldi	r24, 0x06	; 6
   1fc32:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
   1fc36:	8a e0       	ldi	r24, 0x0A	; 10
   1fc38:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#endif
#endif

  // Set up watchdog to trigger after 1s
  watchdogConfig(WATCHDOG_1S);
   1fc3c:	8e e0       	ldi	r24, 0x0E	; 14
   1fc3e:	f9 d0       	rcall	.+498    	; 0x1fe32 <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
   1fc40:	08 9a       	sbi	0x01, 0	; 1
   1fc42:	84 e0       	ldi	r24, 0x04	; 4
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
   1fc44:	2e e9       	ldi	r18, 0x9E	; 158
   1fc46:	3d ef       	ldi	r19, 0xFD	; 253
    TIFR1 = _BV(TOV1);
   1fc48:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
   1fc4a:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
   1fc4e:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    TIFR1 = _BV(TOV1);
   1fc52:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
   1fc54:	b0 9b       	sbis	0x16, 0	; 22
   1fc56:	fe cf       	rjmp	.-4      	; 0x1fc54 <main+0x50>
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega8535__) \
|| defined(__AVR_ATmega16__) || defined(__AVR_ATmega32__) || defined(__AVR_ATmega64__) \
|| defined(__AVR_ATmega128__)
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
   1fc58:	00 9a       	sbi	0x00, 0	; 0
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fc5a:	a8 95       	wdr
   1fc5c:	81 50       	subi	r24, 0x01	; 1
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
   1fc5e:	a9 f7       	brne	.-22     	; 0x1fc4a <main+0x46>
   1fc60:	c0 e0       	ldi	r28, 0x00	; 0
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
   1fc62:	d0 e0       	ldi	r29, 0x00	; 0

    if(ch == STK_GET_PARAMETER) {
   1fc64:	da d0       	rcall	.+436    	; 0x1fe1a <getch>
      unsigned char which = getch();
   1fc66:	81 34       	cpi	r24, 0x41	; 65
   1fc68:	71 f4       	brne	.+28     	; 0x1fc86 <main+0x82>
   1fc6a:	d7 d0       	rcall	.+430    	; 0x1fe1a <getch>
      verifySpace();
   1fc6c:	18 2f       	mov	r17, r24
   1fc6e:	e7 d0       	rcall	.+462    	; 0x1fe3e <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
   1fc70:	12 38       	cpi	r17, 0x82	; 130
   1fc72:	11 f4       	brne	.+4      	; 0x1fc78 <main+0x74>
	  putch(optiboot_version & 0xFF);
   1fc74:	82 e0       	ldi	r24, 0x02	; 2
   1fc76:	05 c0       	rjmp	.+10     	; 0x1fc82 <main+0x7e>
      } else if (which == STK_SW_MAJOR) {
   1fc78:	11 38       	cpi	r17, 0x81	; 129
	  putch(optiboot_version >> 8);
   1fc7a:	11 f4       	brne	.+4      	; 0x1fc80 <main+0x7c>
   1fc7c:	86 e0       	ldi	r24, 0x06	; 6
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
   1fc7e:	01 c0       	rjmp	.+2      	; 0x1fc82 <main+0x7e>
   1fc80:	83 e0       	ldi	r24, 0x03	; 3
   1fc82:	c4 d0       	rcall	.+392    	; 0x1fe0c <putch>
   1fc84:	b0 c0       	rjmp	.+352    	; 0x1fde6 <main+0x1e2>
      }
    }
    else if(ch == STK_SET_DEVICE) {
   1fc86:	82 34       	cpi	r24, 0x42	; 66
      // SET DEVICE is ignored
      getNch(20);
   1fc88:	11 f4       	brne	.+4      	; 0x1fc8e <main+0x8a>
   1fc8a:	84 e1       	ldi	r24, 0x14	; 20
    }
    else if(ch == STK_SET_DEVICE_EXT) {
   1fc8c:	03 c0       	rjmp	.+6      	; 0x1fc94 <main+0x90>
      // SET DEVICE EXT is ignored
      getNch(5);
   1fc8e:	85 34       	cpi	r24, 0x45	; 69
   1fc90:	19 f4       	brne	.+6      	; 0x1fc98 <main+0x94>
   1fc92:	85 e0       	ldi	r24, 0x05	; 5
    }
    else if(ch == STK_LOAD_ADDRESS) {
   1fc94:	dc d0       	rcall	.+440    	; 0x1fe4e <getNch>
   1fc96:	a7 c0       	rjmp	.+334    	; 0x1fde6 <main+0x1e2>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
   1fc98:	85 35       	cpi	r24, 0x55	; 85
   1fc9a:	79 f4       	brne	.+30     	; 0x1fcba <main+0xb6>
   1fc9c:	be d0       	rcall	.+380    	; 0x1fe1a <getch>
      newAddress = (newAddress & 0xff) | (getch() << 8);
   1fc9e:	c8 2f       	mov	r28, r24
   1fca0:	bc d0       	rcall	.+376    	; 0x1fe1a <getch>
   1fca2:	d0 e0       	ldi	r29, 0x00	; 0
   1fca4:	d8 2b       	or	r29, r24
#ifdef RAMPZ
      // Transfer top bit to LSB in RAMPZ
      if (newAddress & 0x8000) {
        RAMPZ |= 0x01;
   1fca6:	8b b7       	in	r24, 0x3b	; 59
      uint16_t newAddress;
      newAddress = getch();
      newAddress = (newAddress & 0xff) | (getch() << 8);
#ifdef RAMPZ
      // Transfer top bit to LSB in RAMPZ
      if (newAddress & 0x8000) {
   1fca8:	d7 ff       	sbrs	r29, 7
   1fcaa:	02 c0       	rjmp	.+4      	; 0x1fcb0 <main+0xac>
        RAMPZ |= 0x01;
   1fcac:	81 60       	ori	r24, 0x01	; 1
      }
      else {
        RAMPZ &= 0xFE;
   1fcae:	01 c0       	rjmp	.+2      	; 0x1fcb2 <main+0xae>
      }
#endif
      newAddress += newAddress; // Convert from word address to byte address
   1fcb0:	8e 7f       	andi	r24, 0xFE	; 254
   1fcb2:	8b bf       	out	0x3b, r24	; 59
      address = newAddress;
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
   1fcb4:	cc 0f       	add	r28, r28
   1fcb6:	dd 1f       	adc	r29, r29
#ifdef RAMPZ
      // LOAD_EXTENDED_ADDRESS is needed in STK_UNIVERSAL for addressing more than 128kB
      if ( AVR_OP_LOAD_EXT_ADDR == getch() ) {
   1fcb8:	95 c0       	rjmp	.+298    	; 0x1fde4 <main+0x1e0>
   1fcba:	86 35       	cpi	r24, 0x56	; 86
   1fcbc:	81 f4       	brne	.+32     	; 0x1fcde <main+0xda>
   1fcbe:	ad d0       	rcall	.+346    	; 0x1fe1a <getch>
        // get address
        getch();  // get '0'
   1fcc0:	8d 34       	cpi	r24, 0x4D	; 77
        RAMPZ = (RAMPZ & 0x01) | ((getch() << 1) & 0xff);  // get address and put it in RAMPZ
   1fcc2:	49 f4       	brne	.+18     	; 0x1fcd6 <main+0xd2>
   1fcc4:	aa d0       	rcall	.+340    	; 0x1fe1a <getch>
   1fcc6:	1b b7       	in	r17, 0x3b	; 59
   1fcc8:	a8 d0       	rcall	.+336    	; 0x1fe1a <getch>
   1fcca:	11 70       	andi	r17, 0x01	; 1
   1fccc:	88 0f       	add	r24, r24
        getNch(1); // get last '0'
   1fcce:	18 2b       	or	r17, r24
   1fcd0:	1b bf       	out	0x3b, r17	; 59
        // response
        putch(0x00);
      }
      else {
        // everything else is ignored
        getNch(3);
   1fcd2:	81 e0       	ldi	r24, 0x01	; 1
   1fcd4:	01 c0       	rjmp	.+2      	; 0x1fcd8 <main+0xd4>
        putch(0x00);
   1fcd6:	83 e0       	ldi	r24, 0x03	; 3
   1fcd8:	ba d0       	rcall	.+372    	; 0x1fe4e <getNch>
      getNch(4);
      putch(0x00);
#endif
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
   1fcda:	80 e0       	ldi	r24, 0x00	; 0
   1fcdc:	d2 cf       	rjmp	.-92     	; 0x1fc82 <main+0x7e>
   1fcde:	84 36       	cpi	r24, 0x64	; 100
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
   1fce0:	09 f0       	breq	.+2      	; 0x1fce4 <main+0xe0>
   1fce2:	4e c0       	rjmp	.+156    	; 0x1fd80 <main+0x17c>
   1fce4:	9a d0       	rcall	.+308    	; 0x1fe1a <getch>
   1fce6:	08 2f       	mov	r16, r24
   1fce8:	10 e0       	ldi	r17, 0x00	; 0
   1fcea:	10 2f       	mov	r17, r16
   1fcec:	00 27       	eor	r16, r16
   1fcee:	95 d0       	rcall	.+298    	; 0x1fe1a <getch>
      savelength = length;
      desttype = getch();
   1fcf0:	08 2b       	or	r16, r24
   1fcf2:	93 d0       	rcall	.+294    	; 0x1fe1a <getch>
   1fcf4:	b8 2e       	mov	r11, r24
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
   1fcf6:	78 01       	movw	r14, r16
      savelength = length;
      desttype = getch();
   1fcf8:	c1 2c       	mov	r12, r1
   1fcfa:	32 e0       	ldi	r19, 0x02	; 2
   1fcfc:	d3 2e       	mov	r13, r19

      // read a page worth of contents
      bufPtr = buff;
      do *bufPtr++ = getch();
   1fcfe:	8d d0       	rcall	.+282    	; 0x1fe1a <getch>
   1fd00:	f6 01       	movw	r30, r12
   1fd02:	81 93       	st	Z+, r24
   1fd04:	6f 01       	movw	r12, r30
   1fd06:	f1 e0       	ldi	r31, 0x01	; 1
      while (--length);
   1fd08:	ef 1a       	sub	r14, r31
   1fd0a:	f1 08       	sbc	r15, r1
   1fd0c:	c1 f7       	brne	.-16     	; 0x1fcfe <main+0xfa>
   1fd0e:	97 d0       	rcall	.+302    	; 0x1fe3e <verifySpace>

      // Read command terminator, start reply
      verifySpace();
   1fd10:	85 e4       	ldi	r24, 0x45	; 69
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, uint8_t *mybuff,
			       uint16_t address, pagelen_t len)
{
    switch (memtype) {
   1fd12:	b8 12       	cpse	r11, r24
   1fd14:	13 c0       	rjmp	.+38     	; 0x1fd3c <main+0x138>
   1fd16:	68 01       	movw	r12, r16
   1fd18:	ee ef       	ldi	r30, 0xFE	; 254
   1fd1a:	de 1a       	sub	r13, r30
   1fd1c:	7e 01       	movw	r14, r28
   1fd1e:	00 e0       	ldi	r16, 0x00	; 0
   1fd20:	12 e0       	ldi	r17, 0x02	; 2
    case 'E': // EEPROM
#if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
        while(len--) {
   1fd22:	c0 16       	cp	r12, r16
   1fd24:	d1 06       	cpc	r13, r17
   1fd26:	09 f4       	brne	.+2      	; 0x1fd2a <main+0x126>
   1fd28:	5e c0       	rjmp	.+188    	; 0x1fde6 <main+0x1e2>
	    eeprom_write_byte((uint8_t *)(address++), *mybuff++);
   1fd2a:	f8 01       	movw	r30, r16
   1fd2c:	61 91       	ld	r22, Z+
   1fd2e:	8f 01       	movw	r16, r30
   1fd30:	c7 01       	movw	r24, r14
   1fd32:	a2 d0       	rcall	.+324    	; 0x1fe78 <eeprom_write_byte>
   1fd34:	ff ef       	ldi	r31, 0xFF	; 255
   1fd36:	ef 1a       	sub	r14, r31
   1fd38:	ff 0a       	sbc	r15, r31
   1fd3a:	f3 cf       	rjmp	.-26     	; 0x1fd22 <main+0x11e>
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    do_spm((uint16_t)(void*)address,__BOOT_PAGE_ERASE,0);
   1fd3c:	40 e0       	ldi	r20, 0x00	; 0
   1fd3e:	50 e0       	ldi	r21, 0x00	; 0
   1fd40:	63 e0       	ldi	r22, 0x03	; 3
   1fd42:	ce 01       	movw	r24, r28
   1fd44:	53 d0       	rcall	.+166    	; 0x1fdec <do_spm>
   1fd46:	6e 01       	movw	r12, r28
	 * space on chips that don't support any other memory types.
	 */
	{
	    // Copy buffer into programming buffer
	    uint8_t *bufPtr = mybuff;
	    uint16_t addrPtr = (uint16_t)(void*)address;
   1fd48:	e1 2c       	mov	r14, r1
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    do_spm((uint16_t)(void*)address,__BOOT_PAGE_ERASE,0);
   1fd4a:	92 e0       	ldi	r25, 0x02	; 2
   1fd4c:	f9 2e       	mov	r15, r25
   1fd4e:	f7 01       	movw	r30, r14
	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
   1fd50:	40 81       	ld	r20, Z
   1fd52:	81 81       	ldd	r24, Z+1	; 0x01
		a |= (*bufPtr++) << 8;
		do_spm((uint16_t)(void*)addrPtr,__BOOT_PAGE_FILL,a);
   1fd54:	50 e0       	ldi	r21, 0x00	; 0
   1fd56:	58 2b       	or	r21, r24
   1fd58:	61 e0       	ldi	r22, 0x01	; 1
   1fd5a:	c6 01       	movw	r24, r12
   1fd5c:	47 d0       	rcall	.+142    	; 0x1fdec <do_spm>
		addrPtr += 2;
   1fd5e:	f2 e0       	ldi	r31, 0x02	; 2
   1fd60:	cf 0e       	add	r12, r31
   1fd62:	d1 1c       	adc	r13, r1
	    } while (len -= 2);
   1fd64:	02 50       	subi	r16, 0x02	; 2
   1fd66:	11 09       	sbc	r17, r1
   1fd68:	82 e0       	ldi	r24, 0x02	; 2
   1fd6a:	e8 0e       	add	r14, r24
   1fd6c:	f1 1c       	adc	r15, r1

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    do_spm((uint16_t)(void*)address,__BOOT_PAGE_WRITE,0);
   1fd6e:	01 15       	cp	r16, r1
   1fd70:	11 05       	cpc	r17, r1
   1fd72:	69 f7       	brne	.-38     	; 0x1fd4e <main+0x14a>
   1fd74:	40 e0       	ldi	r20, 0x00	; 0
   1fd76:	50 e0       	ldi	r21, 0x00	; 0
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
   1fd78:	65 e0       	ldi	r22, 0x05	; 5
   1fd7a:	ce 01       	movw	r24, r28
      uint8_t desttype;
      GETLENGTH(length);
   1fd7c:	37 d0       	rcall	.+110    	; 0x1fdec <do_spm>
   1fd7e:	33 c0       	rjmp	.+102    	; 0x1fde6 <main+0x1e2>
   1fd80:	84 37       	cpi	r24, 0x74	; 116
   1fd82:	19 f5       	brne	.+70     	; 0x1fdca <main+0x1c6>
   1fd84:	4a d0       	rcall	.+148    	; 0x1fe1a <getch>
   1fd86:	08 2f       	mov	r16, r24
   1fd88:	10 e0       	ldi	r17, 0x00	; 0
   1fd8a:	10 2f       	mov	r17, r16

      desttype = getch();
   1fd8c:	00 27       	eor	r16, r16
   1fd8e:	45 d0       	rcall	.+138    	; 0x1fe1a <getch>
   1fd90:	08 2b       	or	r16, r24

      verifySpace();
   1fd92:	43 d0       	rcall	.+134    	; 0x1fe1a <getch>
   1fd94:	f8 2e       	mov	r15, r24

static inline void read_mem(uint8_t memtype, uint16_t address, pagelen_t length)
{
    uint8_t ch;

    switch (memtype) {
   1fd96:	53 d0       	rcall	.+166    	; 0x1fe3e <verifySpace>
   1fd98:	e5 e4       	ldi	r30, 0x45	; 69
   1fd9a:	fe 12       	cpse	r15, r30

#if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
    case 'E': // EEPROM
	do {
	    putch(eeprom_read_byte((uint8_t *)(address++)));
   1fd9c:	0d c0       	rjmp	.+26     	; 0x1fdb8 <main+0x1b4>
   1fd9e:	7e 01       	movw	r14, r28
   1fda0:	c7 01       	movw	r24, r14
   1fda2:	62 d0       	rcall	.+196    	; 0x1fe68 <eeprom_read_byte>
	} while (--length);
   1fda4:	33 d0       	rcall	.+102    	; 0x1fe0c <putch>
   1fda6:	01 50       	subi	r16, 0x01	; 1
   1fda8:	11 09       	sbc	r17, r1
   1fdaa:	ff ef       	ldi	r31, 0xFF	; 255
   1fdac:	ef 1a       	sub	r14, r31
   1fdae:	ff 0a       	sbc	r15, r31

static inline void read_mem(uint8_t memtype, uint16_t address, pagelen_t length)
{
    uint8_t ch;

    switch (memtype) {
   1fdb0:	01 15       	cp	r16, r1
	    // Since RAMPZ should already be set, we need to use EPLM directly.
	    // Also, we can use the autoincrement version of lpm to update "address"
	    //      do putch(pgm_read_byte_near(address++));
	    //      while (--length);
	    // read a Flash and increment the address (may increment RAMPZ)
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
   1fdb2:	11 05       	cpc	r17, r1
   1fdb4:	a9 f7       	brne	.-22     	; 0x1fda0 <main+0x19c>
   1fdb6:	17 c0       	rjmp	.+46     	; 0x1fde6 <main+0x1e2>
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#endif
	    putch(ch);
   1fdb8:	7e 01       	movw	r14, r28
   1fdba:	f7 01       	movw	r30, r14
	} while (--length);
   1fdbc:	87 91       	elpm	r24, Z+
   1fdbe:	7f 01       	movw	r14, r30
   1fdc0:	25 d0       	rcall	.+74     	; 0x1fe0c <putch>
   1fdc2:	01 50       	subi	r16, 0x01	; 1

      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
   1fdc4:	11 09       	sbc	r17, r1
   1fdc6:	c9 f7       	brne	.-14     	; 0x1fdba <main+0x1b6>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
   1fdc8:	0e c0       	rjmp	.+28     	; 0x1fde6 <main+0x1e2>
   1fdca:	85 37       	cpi	r24, 0x75	; 117
      putch(SIGNATURE_0);
   1fdcc:	39 f4       	brne	.+14     	; 0x1fddc <main+0x1d8>
   1fdce:	37 d0       	rcall	.+110    	; 0x1fe3e <verifySpace>
   1fdd0:	8e e1       	ldi	r24, 0x1E	; 30
      putch(SIGNATURE_1);
   1fdd2:	1c d0       	rcall	.+56     	; 0x1fe0c <putch>
   1fdd4:	87 e9       	ldi	r24, 0x97	; 151
   1fdd6:	1a d0       	rcall	.+52     	; 0x1fe0c <putch>
      putch(SIGNATURE_2);
   1fdd8:	84 e0       	ldi	r24, 0x04	; 4
   1fdda:	53 cf       	rjmp	.-346    	; 0x1fc82 <main+0x7e>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
   1fddc:	81 35       	cpi	r24, 0x51	; 81
   1fdde:	11 f4       	brne	.+4      	; 0x1fde4 <main+0x1e0>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
   1fde0:	88 e0       	ldi	r24, 0x08	; 8
   1fde2:	27 d0       	rcall	.+78     	; 0x1fe32 <watchdogConfig>
   1fde4:	2c d0       	rcall	.+88     	; 0x1fe3e <verifySpace>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
   1fde6:	80 e1       	ldi	r24, 0x10	; 16
   1fde8:	11 d0       	rcall	.+34     	; 0x1fe0c <putch>
    }
    putch(STK_OK);
   1fdea:	3c cf       	rjmp	.-392    	; 0x1fc64 <main+0x60>

0001fdec <do_spm>:
   1fdec:	fc 01       	movw	r30, r24
   1fdee:	0a 01       	movw	r0, r20
  }
   1fdf0:	67 bf       	out	0x37, r22	; 55
           "z" ((uint16_t)address),
           "r" ((uint16_t)data)
         : "r0"
     );
#else 
    asm volatile (
   1fdf2:	e8 95       	spm
   1fdf4:	11 24       	eor	r1, r1
#endif    

    // wait for spm to complete
    //   it doesn't have much sense for __BOOT_PAGE_FILL,
    //   but it doesn't hurt and saves some bytes on 'if'
    boot_spm_busy_wait();
   1fdf6:	07 b6       	in	r0, 0x37	; 55
   1fdf8:	00 fc       	sbrc	r0, 0
   1fdfa:	fd cf       	rjmp	.-6      	; 0x1fdf6 <do_spm+0xa>
#if defined(RWWSRE)
    // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
    // but it's tweaked a little assuming that in every command we are interested in here, there
    // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
    if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
   1fdfc:	66 70       	andi	r22, 0x06	; 6
   1fdfe:	29 f0       	breq	.+10     	; 0x1fe0a <do_spm+0x1e>
   1fe00:	45 2b       	or	r20, r21
   1fe02:	19 f4       	brne	.+6      	; 0x1fe0a <do_spm+0x1e>
      // Reenable read access to flash
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)      
      __boot_rww_enable();
#else
      boot_rww_enable();
   1fe04:	81 e1       	ldi	r24, 0x11	; 17
   1fe06:	87 bf       	out	0x37, r24	; 55
   1fe08:	e8 95       	spm
   1fe0a:	08 95       	ret

0001fe0c <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
   1fe0c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
   1fe10:	95 ff       	sbrs	r25, 5
   1fe12:	fc cf       	rjmp	.-8      	; 0x1fe0c <putch>
  UART_UDR = ch;
   1fe14:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
   1fe18:	08 95       	ret

0001fe1a <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
   1fe1a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
   1fe1e:	87 ff       	sbrs	r24, 7
   1fe20:	fc cf       	rjmp	.-8      	; 0x1fe1a <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
   1fe22:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
   1fe26:	84 fd       	sbrc	r24, 4
   1fe28:	01 c0       	rjmp	.+2      	; 0x1fe2c <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fe2a:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
   1fe2c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
   1fe30:	08 95       	ret

0001fe32 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fe32:	e0 e6       	ldi	r30, 0x60	; 96
   1fe34:	f0 e0       	ldi	r31, 0x00	; 0
   1fe36:	98 e1       	ldi	r25, 0x18	; 24
   1fe38:	90 83       	st	Z, r25
  WDTCSR = x;
   1fe3a:	80 83       	st	Z, r24
   1fe3c:	08 95       	ret

0001fe3e <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
   1fe3e:	ed df       	rcall	.-38     	; 0x1fe1a <getch>
   1fe40:	80 32       	cpi	r24, 0x20	; 32
   1fe42:	19 f0       	breq	.+6      	; 0x1fe4a <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
   1fe44:	88 e0       	ldi	r24, 0x08	; 8
   1fe46:	f5 df       	rcall	.-22     	; 0x1fe32 <watchdogConfig>
   1fe48:	ff cf       	rjmp	.-2      	; 0x1fe48 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
   1fe4a:	84 e1       	ldi	r24, 0x14	; 20
   1fe4c:	df cf       	rjmp	.-66     	; 0x1fe0c <putch>

0001fe4e <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
   1fe4e:	cf 93       	push	r28
   1fe50:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
   1fe52:	e3 df       	rcall	.-58     	; 0x1fe1a <getch>
   1fe54:	c1 50       	subi	r28, 0x01	; 1
   1fe56:	e9 f7       	brne	.-6      	; 0x1fe52 <getNch+0x4>
  verifySpace();
   1fe58:	cf 91       	pop	r28
   1fe5a:	f1 cf       	rjmp	.-30     	; 0x1fe3e <verifySpace>

0001fe5c <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
   1fe5c:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
   1fe5e:	80 e0       	ldi	r24, 0x00	; 0
   1fe60:	e8 df       	rcall	.-48     	; 0x1fe32 <watchdogConfig>
   1fe62:	e0 e0       	ldi	r30, 0x00	; 0
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
   1fe64:	ff 27       	eor	r31, r31
   1fe66:	09 94       	ijmp

0001fe68 <eeprom_read_byte>:
   1fe68:	f9 99       	sbic	0x1f, 1	; 31
   1fe6a:	fe cf       	rjmp	.-4      	; 0x1fe68 <eeprom_read_byte>
   1fe6c:	92 bd       	out	0x22, r25	; 34
   1fe6e:	81 bd       	out	0x21, r24	; 33
   1fe70:	f8 9a       	sbi	0x1f, 0	; 31
   1fe72:	99 27       	eor	r25, r25
   1fe74:	80 b5       	in	r24, 0x20	; 32
   1fe76:	08 95       	ret

0001fe78 <eeprom_write_byte>:
   1fe78:	26 2f       	mov	r18, r22

0001fe7a <eeprom_write_r18>:
   1fe7a:	f9 99       	sbic	0x1f, 1	; 31
   1fe7c:	fe cf       	rjmp	.-4      	; 0x1fe7a <eeprom_write_r18>
   1fe7e:	1f ba       	out	0x1f, r1	; 31
   1fe80:	92 bd       	out	0x22, r25	; 34
   1fe82:	81 bd       	out	0x21, r24	; 33
   1fe84:	20 bd       	out	0x20, r18	; 32
   1fe86:	0f b6       	in	r0, 0x3f	; 63
   1fe88:	f8 94       	cli
   1fe8a:	fa 9a       	sbi	0x1f, 2	; 31
   1fe8c:	f9 9a       	sbi	0x1f, 1	; 31
   1fe8e:	0f be       	out	0x3f, r0	; 63
   1fe90:	01 96       	adiw	r24, 0x01	; 1
   1fe92:	08 95       	ret
